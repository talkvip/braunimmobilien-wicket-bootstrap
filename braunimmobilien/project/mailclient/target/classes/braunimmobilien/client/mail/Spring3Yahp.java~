package braunimmobilien.client;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.log4j.FileAppender;
import org.apache.log4j.SimpleLayout;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.springframework.beans.factory.annotation.Autowired;
import braunimmobilien.service.ScoutManager;
import braunimmobilien.model.Scout;
import braunimmobilien.service.EigentuemermusterManager;
import braunimmobilien.model.Eigentuemermuster;
import braunimmobilien.service.TypeManager;
import braunimmobilien.model.Type;
import braunimmobilien.service.ObjarttypManager;
import braunimmobilien.model.Objarttyp;
import braunimmobilien.service.OrteManager;
import braunimmobilien.model.Orte;
import java.io.*;
import java.util.Hashtable;
import java.net.MalformedURLException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import java.net.URL;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.Date;
import java.sql.*;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.auth.oauth2.GoogleOAuthConstants;
import com.google.api.client.googleapis.auth.oauth2.GoogleTokenResponse;
import com.google.api.client.http.HttpTransport;
import com.google.api.client.http.javanet.NetHttpTransport;
import com.google.api.client.json.JsonFactory;
import com.google.api.client.json.jackson2.JacksonFactory;
import com.google.api.services.gmail.Gmail;
import com.google.api.services.gmail.model.Thread;
import com.google.api.services.gmail.model.ListThreadsResponse;
import com.google.api.services.gmail.model.Message;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.List;
import java.util.Iterator;
public class Spring3Yahp {
	 @Autowired
		private  TypeManager typeManager;
	 public TypeManager getTypeManager() {
		return typeManager;
	}

	public void setTypeManager(TypeManager typeManager) {
		this.typeManager = typeManager;
	}

	public ObjarttypManager getObjarttypManager() {
		return objarttypManager;
	}

	public void setObjarttypManager(ObjarttypManager objarttypManager) {
		this.objarttypManager = objarttypManager;
	}

	public OrteManager getOrteManager() {
		return orteManager;
	}

	public void setOrteManager(OrteManager orteManager) {
		this.orteManager = orteManager;
	}

	public EigentuemermusterManager getEigentuemermusterManager() {
		return eigentuemermusterManager;
	}

	public void setEigentuemermusterManager(
			EigentuemermusterManager eigentuemermusterManager) {
		this.eigentuemermusterManager = eigentuemermusterManager;
	}
	@Autowired
		private  ObjarttypManager objarttypManager;
	 @Autowired
		private  OrteManager orteManager;
	 @Autowired
	private  ScoutManager scoutManager;
	public ScoutManager getScoutManager() {
		return scoutManager;
	}

	public void setScoutManager(ScoutManager scoutManager) {
		this.scoutManager = scoutManager;
	}
	 @Autowired
		private  EigentuemermusterManager eigentuemermusterManager;
		

	public EigentuemermusterManager getEinetuemermusterManager() {
		return eigentuemermusterManager;
	}

	public void setEinetuemermusterManager(
			EigentuemermusterManager einetuemermusterManager) {
		this.eigentuemermusterManager = einetuemermusterManager;
	}
	private static final Log LOG = LogFactory.getLog(Spring3Yahp.class);
	private static  String directory="/homeerweitert/java/immobilien/objekte/Hannover/Renditeobjekte/";
	private static String objarttyp="0";
	private static String ortid="1";
	private static int anzahl=2;
	static String adressen[]=new String[2];
	
	static ResultSet rs = null;
	static Statement stmt=null;
	static Connection con=null; 
	static BufferedWriter writer;
	
  // Check https://developers.google.com/gmail/api/auth/scopes for all available scopes
  private static final String SCOPE = "https://www.googleapis.com/auth/gmail.readonly";
  private static final String APP_NAME = "gmailexample";
  // Email address of the user, or "me" can be used to represent the currently authorized user.
  private static final String USER = "braun18091949@gmail.com";
  // Path to the client_secret.json file downloaded from the Developer Console
  private static final String CLIENT_SECRET_PATH = "/home/java/wicket/gmailapi/gmailexample/src/client_secret.json";

  private static GoogleClientSecrets clientSecrets;
	/**
	 * @param args
	 */
	  
	
	public void yahp(String[] args) {
		
		if(args.length!=6){
			LOG.error("Die Anzahl der Parameter stimmt nicht");
	System.exit(1);
		}
	
		

		directory=args[0];
		
		objarttyp=args[1];
		ortid=args[2];
		adressen[0]=args[3];
		adressen[1]=args[4];
		anzahl=Integer.parseInt(args[5]);
	LOG.info("work directory : "+directory);
	LOG.info(" objarttyp "+objarttyp);
	LOG.info(" ortid "+ortid);
	LOG.info(" adressen "+adressen.toString());
	LOG.info(" anzahl "+anzahl);
	
	
	if(!(adressen[0].equals("null")&&adressen[1].equals("null"))){
	
	  HttpTransport httpTransport = new NetHttpTransport();
    JsonFactory jsonFactory = new JacksonFactory();
try{
    clientSecrets = GoogleClientSecrets.load(jsonFactory,  new FileInputStream(CLIENT_SECRET_PATH));

    // Allow user to authorize via url.
    GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
        httpTransport, jsonFactory, clientSecrets, Arrays.asList(SCOPE))
        .setAccessType("online")
        .setApprovalPrompt("auto").build();

    String url = flow.newAuthorizationUrl().setRedirectUri(GoogleOAuthConstants.OOB_REDIRECT_URI)
        .build();
    System.out.println("Please open the following URL in your browser then type"
                       + " the authorization code:\n" + url);

    // Read code entered by user.
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String code = br.readLine();

    // Generate Credential using retrieved code.
    GoogleTokenResponse response = flow.newTokenRequest(code)
        .setRedirectUri(GoogleOAuthConstants.OOB_REDIRECT_URI).execute();
    GoogleCredential credential = new GoogleCredential()
        .setFromTokenResponse(response);

    // Create a new authorized Gmail API client
    Gmail service = new Gmail.Builder(httpTransport, jsonFactory, credential)
        .setApplicationName(APP_NAME).build();
    
    // Retrieve a page of Threads; max of 100 by default.
    ListThreadsResponse threadsResponse = service.users().threads().list(USER).execute();
    List<Thread> threads = threadsResponse.getThreads();

    // Print ID of each Thread.
    for (Thread thread : threads) {
    	if(thread.getMessages()!=null){
    	Iterator it=thread.getMessages().iterator();
    	while(it.hasNext()){
    		
    		Message message=(Message)it.next();
    		 System.out.println(message.toPrettyString());
    		
    	}
}
}

 
}
catch(Exception e){System.out.println("IO Exception");
System.exit(1);
}
    	
    
     
   

		
		 	
		 	System.exit(1);}
		 	
	
	}

	
}
